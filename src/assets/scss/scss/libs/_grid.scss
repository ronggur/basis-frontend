/*
Grid System
Original source by Bootstrap
*/

.grid{
	max-width:1200px;
	width:100%;
	margin:0 auto;
	display: block;
	padding: 0 15px;
	img{
		max-width: 100%;
		height:auto;
	}
	&:after {
		content: "";
		clear: both;
		display: block;
	}
}

.row{
	width: 100%;
	&:before {
		display: table;
		content: "";
	}
	&:after {
		clear: both;
		display: table;
		content: "";
	}
}

*[class*="col-"].alpha{margin-left:0;}
*[class*="col-"].omega{margin-right:0;}

// ** Number of columns in the grid.
$grid-columns:              12 !default;
// ** Padding between columns. Gets divided in half for the left and right.
$grid-gutter-width:         20px !default;

@mixin make-grid-columns($i: 1, $list: ".col-#{$i}") {
	@for $i from (1 + 1) through $grid-columns {
		$list: "#{$list}, .col-#{$i}";
	}
	#{$list} {
		position: relative;
		// Prevent columns from collapsing when empty
		min-height: 1px;
		// Inner gutter via padding
		padding-left:  ($grid-gutter-width / 2);
		padding-right: ($grid-gutter-width / 2);
		line-height: 1;
		@include box-sizing(border-box);
	}
}


@mixin calc-grid-column($index, $type) {
	@if ($type == width) and ($index > 0) {
		.col-#{$index} {
			width: percentage(($index / $grid-columns));
		}
		.phone-col-#{$index} {
			@include respond-to(phone){
				width: percentage(($index / $grid-columns))!important;
			}
		}
		.phablet-col-#{$index} {
			@include respond-to(phablet){
				width: percentage(($index / $grid-columns))!important;
			}
		}
		.tablet-col-#{$index} {
			@include respond-to(tablet){
				width: percentage(($index / $grid-columns))!important;
			}
		}
	}
	@if ($type == push) and ($index > 0) {
		.col-push-#{$index} {
			left: percentage(($index / $grid-columns));
		}
		.phone-col-push-#{$index} {
			@include respond-to(phone){
				left: percentage(($index / $grid-columns))!important;
			}
		}
		.phablet-col-push-#{$index} {
			@include respond-to(phablet){
				left: percentage(($index / $grid-columns))!important;
			}
		}
		.tablet-col-push-#{$index} {
			@include respond-to(tablet){
				left: percentage(($index / $grid-columns))!important;
			}
		}
	}
	@if ($type == push) and ($index == 0) {
		.col-push-0 {
			left: auto;
		}
		.phone-col-push-0 {
			@include respond-to(phone){
				left: auto!important;
			}
		}
		.phablet-col-push-0 {
			@include respond-to(phablet){
				left: auto!important;
			}
		}
		.tablet-col-push-0 {
			@include respond-to(tablet){
				left: auto!important;
			}
		}
	}
	@if ($type == pull) and ($index > 0) {
		.col-pull-#{$index} {
			right: percentage(($index / $grid-columns));
		}
		.phone-col-pull-#{$index} {
			@include respond-to(phone){
				right: percentage(($index / $grid-columns))!important;
			}
		}
		.phablet-col-pull-#{$index} {
			@include respond-to(phablet){
				right: percentage(($index / $grid-columns))!important;
			}
		}
		.tablet-col-pull-#{$index} {
			@include respond-to(tablet){
				right: percentage(($index / $grid-columns))!important;
			}
		}
	}
	@if ($type == pull) and ($index == 0) {
		.col-pull-0 {
			right: auto;
		}
		.phone-col-pull-0 {
			@include respond-to(phone){
				right: auto!important;
			}
		}
		.phablet-col-pull-0 {
			@include respond-to(phablet){
				right: auto!important;
			}
		}
		.tablet-col-pull-0 {
			@include respond-to(tablet){
				right: auto!important;
			}
		}
	}
	@if ($type == offset) {
		.col-offset-#{$index} {
			margin-left: percentage(($index / $grid-columns));
		}
		.phone-col-offset-#{$index} {
			@include respond-to(phone){
				margin-left: percentage(($index / $grid-columns))!important;
			}
		}
		.phablet-col-offset-#{$index} {
			@include respond-to(phablet){
				margin-left: percentage(($index / $grid-columns))!important;
			}
		}
		.tablet-col-offset-#{$index} {
			@include respond-to(tablet){
				margin-left: percentage(($index / $grid-columns))!important;
			}
		}
	}
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $type) {
	@for $i from 0 through $columns {
		@include calc-grid-column($i, $type);
	}
}


// Create grid for specific class
@mixin make-grid() {
	@include float-grid-columns();
	@include loop-grid-columns($grid-columns, width);
	@include loop-grid-columns($grid-columns, pull);
	@include loop-grid-columns($grid-columns, push);
	@include loop-grid-columns($grid-columns, offset);
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($i: 1, $list: ".col-#{$i}") {
	@for $i from (1 + 1) through $grid-columns {
		$list: "#{$list}, .col-#{$i}";
	}
	#{$list} {
		float: left;
	}
}

@mixin make-row($gutter: $grid-gutter-width) {
	margin-left:  ($gutter / -2);
	margin-right: ($gutter / -2);
	@include clearfix;
}

@include make-grid-columns;
@include make-grid;

.clear{clear:both;display:block;overflow:hidden;visibility:hidden;width:0;height:0}
.clearfix:after{clear:both;content:' ';display:block;font-size:0;line-height:0;visibility:hidden;width:0;height:0}
* html .clearfix, *:first-child+html .clearfix{zoom:1}

.nopad{
	padding: 0;
	[class^='col-'], 
	[class^='-col-'],
	[class*=' col-'],
	[class*=' -col-'] {
		padding: 0;
	}
}
.nomarg{
	margin: 0;
}

/* Viewable Grids 
To view your grids, add the class .visible to any grid container.
This will add a background color so you can see the layout of your grids. 
*/
*[class*="col_"].visible{
	background:#eee;
	border:1px dotted #ccc;
}

.hide-desktop {
	@include respond-to(desktop){
		display: none;
	}
}
.hide-tablet {
	@include respond-to(tablet){
		display: none;
	}
}
.hide-phablet {
	@include respond-to(phablet){
		display: none;
	}
}
.hide-phone {
	@include respond-to(phone){
		display: none;
	}
}